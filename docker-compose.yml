services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SERVICE=frontend
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - backend
    command: ["/app/wait-for-it.sh", "backend:8000", "--", "python", "-m", "frontend.main"]
    networks:
      - app_network
    volumes:
      - ./frontend:/app/frontend
      - ./alembic:/app/alembic

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SERVICE=backend
    ports:
      - "8000:8000"
    depends_on:
      mongo:
        condition: service_healthy
      internal_messaging:
        condition: service_healthy
    command: ["/app/wait-for-it.sh", "rabbitmq:5672", "--", "python", "-m", "backend.main"]
    networks:
      - app_network
    volumes:
      - ./backend:/app/backend

  postgres:
    image: postgres:15.1-alpine
    environment:
      POSTGRES_DB: library
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    ports:
      - "5455:5432"  

  mongo:
    image: bitnami/mongodb:latest
    volumes:
      - mongo_data:/bitnami/mongodb
    networks:
      - app_network
    ports:
      - "27018:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/testDocker --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  internal_messaging:
    image: rabbitmq:3-management
    networks:
      - app_network
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  rabbitmq_data:
